#+TITLE: Managed Runtime Systems
#+SUBTITLE: Lecture 01: Introduction
#+AUTHOR: Foivos Zakkak
#+EMAIL: foivos@zakkak.net
#+DATE: 2021-02-15
#+INCLUDE: ./99-ox-reveal-setup.org
#+INCLUDE: ./99-license.org

* Introduction

** What is a Managed Runtime System?
A {{{alert(machine)}}} that executes managed programs
#+begin_src ditaa :file ./figures/layers.svg :exports results :cmdline -T -E --svg -s 2
+-------------------------------------------+
|                                           |
|        Program (Java, Python, etc.)       |
|                                           |
+-------------------------------------------+
| cF50                                      |
| Managed Runtime Systems / Virtual Machine |
|                                           |
+-----------+-----------+-----------+-------+
|           |           |           |       |
| GNU/Linux |    OSX    |  Windows  |  ...  |
|           |           |           |       |
+--------+--+--------+--+---------+-+-------+
|        |           |            |         |
|  x86   |   ARMv8   |   RISC-V   |   ...   |
|        |           |            |         |
+--------+-----------+------------+---------+
#+end_src
#+RESULTS:
[[file:./figures/layers.svg]]

** Other names for Managed Runtime Systems
+ Managed Runtime Environments
+ Managed Runtimes
+ Virtual Machines
+ Process Virtual Machines
+ Language Virtual Machines

* Why Managed Languages and Runtime Systems?

** Portability: "Write once, run everywhere"
+ Binary distribution
+ Consistent behavior
+ No need to recompile
+ No need to account for OS differences
+ No need to account for hardware differences

** Safety
+ Sandboxed environment
+ No pointer arithmetic
+ No arbitrary memory accesses
+ No arbitrary code flow

** Productivity
+ No need to reinvent the wheel
+ No need to account for OS differences
+ No need to account for hardware differences/details

** Debugging
+ No need to recompile
+ On the fly instrumentation of production code
+ Observation of the system state

** Performance (some times)
+ Code profiling
+ On the fly optimization

** Snapshots
+ Store state
+ Resume later
+ Resume elsewhere

** How Does it Work?
#+ATTR_HTML: :border 0 :width 100% :frame none
| {{{alert(Interpreters)}}}       | Parse and execute instructions         |
| {{{alert(JIT compilers)}}}      | On the fly compilation to machine code |
| {{{alert(Garbage Collectors)}}} | Automatic memory management            |
| {{{alert(Memory Models)}}}      | Define expected behavior               |

** The most popular MRS/VMs
#+ATTR_HTML: :border 0 :width 100% :frame none
| {{{alert(Java)}}}                  | HotSpot (Oracle and OpenJDK)        |
|                                    | OpenJ9 (IBM and Eclipse)            |
|                                    | Android Runtime (Google)            |
|                                    |                                     |
| {{{alert(JS)}}}                    | V8 (Google)                         |
|                                    | SpiderMonkey (Mozilla)              |
|                                    | JavaScriptCore a.k.a. Nitro (Apple) |
|                                    | \xcancel{Chakra (Microsoft)}        |
|                                    |                                     |
| {{{alert(.Net (C\#, J\#, etc.))}}} | Common Language Runtime (Microsoft) |

** Different Goals Different Challenges
#+ATTR_HTML: :border 0 :width 100% :frame none
| {{{alert(Java \& .Net)}}} | Server Applications                  |
|                           | Desktop Applications                 |
|                           | Mobile Applications                  |
|                           |                                      |
| {{{alert(JS)}}}           | Web Backend (e.g. nodeJS)            |
|                           | Web Frontend                         |
|                           | Desktop Applications (e.g. Electron) |

** Server Applications
+ High throughput
+ Low latency
+ Large heap
+ Responsiveness

** Desktop Applications
+ Responsiveness
+ Fast startup (bootstrap)

** Mobile Applications
+ Responsiveness
+ Fast startup (bootstrap)
+ Small memory footprint
+ Low energy consumption

** Web Backend
+ High throughput
+ Large heap
+ Responsiveness

** Web Frontend
+ Responsiveness
+ Fast startup (bootstrap)
+ Small memory footprint

** Different Goals Different Challenges
#+ATTR_HTML: :border 0 :width 100% :frame none :style font-size:70%
|              | Performance | Memory | Energy      | Startup |
|              | Orientation | Usage  | Consumption | Time    |
|--------------+-------------+--------+-------------+---------|
| Desktop Apps | Latency     | Medium | Low         | Fast    |
| Mobile Apps  | Latency     | Low    | Low         | Fast    |
| Web Frontend | Latency     | Low    | Low         | Fast    |
| Web Backend  | Throughput  | High   | $           | --      |
| Server Apps  | Both        | High   | $           | --      |

* No VM to rule them all!!!
Yet!?

** Key features of a successful VM
+ Fast
+ Energy Efficient
+ Secure
+ Modular
+ Built-in Concurrency Support

** Nice to have features
+ Maintainable
+ Polyglot!?
+ Fault tolerance
+ Support for accelerators/heterogeneous systems
+ Small memory footprint
